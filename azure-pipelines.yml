trigger:
- master

schedules:
- cron: "0 0 * * 0"
  displayName: Weekly midnight (UTC) build
  branches:
    include:
    - master
  always: true

pool:
  vmImage: 'ubuntu-16.04'

variables:
  GOPATH: '$(Agent.BuildDirectory)/gopath' # Go workspace path
  GOROOT: '$(Agent.BuildDirectory)/go' # Go installation path
  GOBIN:  '$(GOPATH)/bin' # Go binaries path
  modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code

steps:
- script: |
    wget "https://dl.google.com/go/go1.13.4.linux-amd64.tar.gz" --output-document "$(Agent.BuildDirectory)/go1.13.4.tar.gz"
    tar -C '$(Agent.BuildDirectory)' -xzf "$(Agent.BuildDirectory)/go1.13.4.tar.gz"
  displayName: 'Install Go 1.13.4'

- script: |
    mkdir -p '$(GOBIN)'
    mkdir -p '$(GOPATH)/pkg'
    mkdir -p '$(modulePath)'
    mkdir -p '$(GOROOT)'
    shopt -s extglob
    shopt -s dotglob
    mv !(gopath) '$(modulePath)'
    echo '##vso[task.prependpath]$(GOBIN)'
    echo '##vso[task.prependpath]$(GOROOT)/bin'
  displayName: 'Set up the Go workspace'

- script: |
    go get -u github.com/gobuffalo/packr/v2/packr2
    export GO111MODULE=on
    packr2 build
    go get
    go build
    mkdir -p payloads
  displayName: 'Build MOSE'
  workingDirectory: "$(modulePath)"

# Puppet
- script: |
    export GO111MODULE=on
    ./mose -c "touch /tmp/test.txt && echo test >> /tmp/test.txt" -t puppet -f $(modulePath)/payloads/puppet-linux
  displayName: 'Generate a puppet payload'
  workingDirectory: "$(modulePath)"

- script: | 
    git clone https://github.com/master-of-servers/puppet-test-lab.git
    cd puppet-test-lab && cd basic
    docker-compose up -d --build
    sleep 40
    # Enroll agent with puppet master
    docker exec -i basic-puppetagent /bin/bash -c "puppet agent -t --waitforcert=120"
    docker ps
  displayName: 'Build and configure puppet test environment'
  workingDirectory: "$(modulePath)"

- script: | 
    docker cp $(modulePath)/payloads/puppet-linux basic-puppetmaster:/puppet-linux
    docker exec -i basic-puppetmaster /bin/bash -c "echo 'Y' | /puppet-linux"
    docker exec -i basic-puppetagent /bin/bash -c "puppet agent -t"
    docker exec -i basic-puppetagent /bin/bash -c "cat /tmp/test.txt"
  displayName: 'Run MOSE generated payload on puppet test environment'
  workingDirectory: "$(modulePath)"
# End Puppet

# Chef
- script: |
    sudo apt-get update -y
    sudo DEBIAN_FRONTEND=noninteractive apt-get install -y tzdata
    sudo apt-get install -y expect
    export GO111MODULE=on
    expect scripts/test_chef_workstation.exp
  displayName: 'Generate a chef payload for workstation in chef test environment'
  workingDirectory: "$(modulePath)"

- script: | 
    git clone https://github.com/master-of-servers/chef-test-lab.git
    cd chef-test-lab
    cd docker/basic
    bash create_ssh_key.sh
    docker-compose up -d --build
    echo "Sleeping for 12 minutes (720 seconds) while waiting for the chef environment to finish building."
    sleep 720
    docker ps
  displayName: 'Build and configure chef test environment'
  workingDirectory: "$(modulePath)"

- script: | 
    # Copy MOSE payload to workstation
    docker cp $(modulePath)/payloads/chef-linux basic-chef-workstation:/chef-linux
    # This is very annoying and redundant work, but it seems to need to be done for the pipeline
    docker exec -i basic-chef-workstation /bin/bash -c "cd /root/.chef/cookbooks && rm -rf chef-client && knife supermarket download chef-client && tar -xvf chef-client-*; rm *tar*"
    docker exec -i basic-chef-workstation /bin/bash -c "cd /root/.chef/cookbooks && cp hello/Berksfile chef-client/Berksfile"
    docker exec -i basic-chef-workstation /bin/bash -c "cd /root/.chef/cookbooks/chef-client && berks install && berks upload"
    docker exec -i basic-chef-workstation /bin/bash -c "cd /root/.chef/ && knife ssl fetch && knife upload cookbooks"
    docker exec -i basic-chef-workstation knife vault create secret_vault mysql_pw '{"user": "mysql", "password": "TheM0stS3cr3T!!!"}'
    # Bootstrap agent with chef server
    docker exec -i basic-chef-workstation /bin/bash -c "knife bootstrap chef-agent-1 -u root -P toor --sudo -N chef-agent-1 --run-list 'recipe[hello], recipe[chef-client::config]'"

    # Run MOSE against the workstation
    docker exec -i basic-chef-workstation /bin/bash -c "echo 'n' | /chef-linux"
    # Run chef-client to enact the changes made by MOSE
    docker exec -i basic-chef-agent-1 /bin/bash -c "chef-client"
    
    # Ensure that MOSE is working properly by running cat on the file it created
    docker exec -i basic-chef-agent-1 /bin/bash -c "cat /tmp/test.txt"
  displayName: 'Run MOSE generated payload on workstation in chef test environment'
  workingDirectory: "$(modulePath)"
# End Chef

- script: |
   export GO111MODULE=on
   go test -count=1 -v -race ./...
  displayName: 'Run unit tests'
  workingDirectory: "$(modulePath)"